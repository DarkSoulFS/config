From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jason Penilla <11360596+jpenilla@users.noreply.github.com>
Date: Tue, 7 Nov 2023 15:50:15 -0700
Subject: [PATCH] Add back key sorting on write with option to disable


diff --git a/config/src/main/java/com/typesafe/config/ConfigRenderOptions.java b/config/src/main/java/com/typesafe/config/ConfigRenderOptions.java
index 99730789532ac4d06a095d3decd6e05a7ae1b54f..cd28814e476f8dfb841f8df723fe52dc5ebab6a5 100644
--- a/config/src/main/java/com/typesafe/config/ConfigRenderOptions.java
+++ b/config/src/main/java/com/typesafe/config/ConfigRenderOptions.java
@@ -22,14 +22,16 @@ public final class ConfigRenderOptions {
     private final boolean formatted;
     private final boolean json;
     private final boolean showEnvVariableValues;
+    private final boolean sortKeys;
 
     private ConfigRenderOptions(boolean originComments, boolean comments, boolean formatted,
-            boolean json, boolean showEnvVariableValues) {
+            boolean json, boolean showEnvVariableValues, boolean sortKeys) {
         this.originComments = originComments;
         this.comments = comments;
         this.formatted = formatted;
         this.json = json;
         this.showEnvVariableValues = showEnvVariableValues;
+        this.sortKeys = sortKeys;
     }
 
     /**
@@ -40,7 +42,7 @@ public final class ConfigRenderOptions {
      * @return the default render options
      */
     public static ConfigRenderOptions defaults() {
-        return new ConfigRenderOptions(true, true, true, true, true);
+        return new ConfigRenderOptions(true, true, true, true, true, true);
     }
 
     /**
@@ -50,7 +52,7 @@ public final class ConfigRenderOptions {
      * @return the concise render options
      */
     public static ConfigRenderOptions concise() {
-        return new ConfigRenderOptions(false, false, false, true, true);
+        return new ConfigRenderOptions(false, false, false, true, true, true);
     }
 
     /**
@@ -66,7 +68,7 @@ public final class ConfigRenderOptions {
         if (value == comments)
             return this;
         else
-            return new ConfigRenderOptions(originComments, value, formatted, json, showEnvVariableValues);
+            return new ConfigRenderOptions(originComments, value, formatted, json, showEnvVariableValues, sortKeys);
     }
 
     /**
@@ -99,7 +101,7 @@ public final class ConfigRenderOptions {
         if (value == originComments)
             return this;
         else
-            return new ConfigRenderOptions(value, comments, formatted, json, showEnvVariableValues);
+            return new ConfigRenderOptions(value, comments, formatted, json, showEnvVariableValues, sortKeys);
     }
 
     /**
@@ -124,7 +126,7 @@ public final class ConfigRenderOptions {
         if (value == formatted)
             return this;
         else
-            return new ConfigRenderOptions(originComments, comments, value, json, showEnvVariableValues);
+            return new ConfigRenderOptions(originComments, comments, value, json, showEnvVariableValues, sortKeys);
     }
 
     /**
@@ -152,7 +154,7 @@ public final class ConfigRenderOptions {
         if (value == json)
             return this;
         else
-            return new ConfigRenderOptions(originComments, comments, formatted, value, showEnvVariableValues);
+            return new ConfigRenderOptions(originComments, comments, formatted, value, showEnvVariableValues, sortKeys);
     }
 
     /**
@@ -167,7 +169,7 @@ public final class ConfigRenderOptions {
         if (value == showEnvVariableValues)
             return this;
         else
-            return new ConfigRenderOptions(originComments, comments, formatted, json, value);
+            return new ConfigRenderOptions(originComments, comments, formatted, json, value, sortKeys);
     }
 
     /**
@@ -180,6 +182,17 @@ public final class ConfigRenderOptions {
         return showEnvVariableValues;
     }
 
+    public ConfigRenderOptions setSortKeys(boolean value) {
+        if (value == sortKeys)
+            return this;
+        else
+            return new ConfigRenderOptions(originComments, comments, formatted, json, showEnvVariableValues, value);
+    }
+
+    public boolean getSortKeys() {
+        return sortKeys;
+    }
+
     /**
      * Returns whether the options enable JSON. This method is mostly used by
      * the config lib internally, not by applications.
diff --git a/config/src/main/java/com/typesafe/config/impl/SimpleConfigObject.java b/config/src/main/java/com/typesafe/config/impl/SimpleConfigObject.java
index 7dfc361bf126c4583782d8ab1e14bd29c27a39c1..6cdc0c9dd734351cce358b8b5fee8c510027ee01 100644
--- a/config/src/main/java/com/typesafe/config/impl/SimpleConfigObject.java
+++ b/config/src/main/java/com/typesafe/config/impl/SimpleConfigObject.java
@@ -8,6 +8,7 @@ import java.io.Serializable;
 import java.math.BigInteger;
 import java.util.AbstractMap;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.LinkedHashMap;
@@ -480,6 +481,9 @@ final class SimpleConfigObject extends AbstractConfigObject implements Serializa
 
             int separatorCount = 0;
             String[] keys = keySet().toArray(new String[size()]);
+            if (options.getSortKeys()) {
+                Arrays.sort(keys, new RenderComparator());
+            }
             for (String k : keys) {
                 AbstractConfigValue v;
                 v = value.get(k);
diff --git a/config/src/test/scala/com/typesafe/config/impl/ConfigTest.scala b/config/src/test/scala/com/typesafe/config/impl/ConfigTest.scala
index 63098872a57b0eccccf5e023498df7d8e7f5a7f1..6e51d2c72effff2d3294077224153e3fc1b7bca0 100644
--- a/config/src/test/scala/com/typesafe/config/impl/ConfigTest.scala
+++ b/config/src/test/scala/com/typesafe/config/impl/ConfigTest.scala
@@ -1379,7 +1379,7 @@ class ConfigTest extends TestUtils {
             "x=${a.b.c},y=${d.e.f}", true,
             new DummyResolver("d.", "", null))
         runFallbackTest(
-            "x=${a},y=\"X.b\",z=\"Y.c\",w=\"Y.c.d\"",
+            "w=\"Y.c.d\",x=${a},y=\"X.b\",z=\"Y.c\"",
             "x=${a},y=${a.b},z=${a.b.c},w=${a.b.c.d}", true,
             new DummyResolver("a.b.", "Y.", null),
             new DummyResolver("a.", "X.", null))
diff --git a/config/src/test/scala/com/typesafe/config/impl/ConfigValueTest.scala b/config/src/test/scala/com/typesafe/config/impl/ConfigValueTest.scala
index 66ef10ed87b9a64ccc3fd684169ad4d21e6622b9..8d2ec38466c5be076f65977f72f12f0575feac19 100644
--- a/config/src/test/scala/com/typesafe/config/impl/ConfigValueTest.scala
+++ b/config/src/test/scala/com/typesafe/config/impl/ConfigValueTest.scala
@@ -980,12 +980,10 @@ class ConfigValueTest extends TestUtils {
         assertEquals(conf, parsed)
     }
 
-    /*
     @Test
     def renderSorting(): Unit = {
         val config = parseConfig("""0=a,1=b,2=c,999999999999999999999999999999999999999999999=0,3=d,10=e,20a=f,20=g,30=h""")
         val rendered = config.root.render(ConfigRenderOptions.concise())
         assertEquals("""{"0":"a","1":"b","2":"c","3":"d","10":"e","20":"g","30":"h","999999999999999999999999999999999999999999999":0,"20a":"f"}""", rendered)
     }
-     */
 }
